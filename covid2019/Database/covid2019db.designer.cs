#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace covid2019.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="covid2019")]
	public partial class covid2019dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMstBarangay(MstBarangay instance);
    partial void UpdateMstBarangay(MstBarangay instance);
    partial void DeleteMstBarangay(MstBarangay instance);
    partial void InsertMstTable(MstTable instance);
    partial void UpdateMstTable(MstTable instance);
    partial void DeleteMstTable(MstTable instance);
    partial void InsertMstCity(MstCity instance);
    partial void UpdateMstCity(MstCity instance);
    partial void DeleteMstCity(MstCity instance);
    partial void InsertMstCountry(MstCountry instance);
    partial void UpdateMstCountry(MstCountry instance);
    partial void DeleteMstCountry(MstCountry instance);
    partial void InsertMstPatient(MstPatient instance);
    partial void UpdateMstPatient(MstPatient instance);
    partial void DeleteMstPatient(MstPatient instance);
    partial void InsertMstProvince(MstProvince instance);
    partial void UpdateMstProvince(MstProvince instance);
    partial void DeleteMstProvince(MstProvince instance);
    #endregion
		
		public covid2019dbDataContext() : 
				base(global::covid2019.Properties.Settings.Default.covid2019ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public covid2019dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public covid2019dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public covid2019dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public covid2019dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MstBarangay> MstBarangays
		{
			get
			{
				return this.GetTable<MstBarangay>();
			}
		}
		
		public System.Data.Linq.Table<MstTable> MstTables
		{
			get
			{
				return this.GetTable<MstTable>();
			}
		}
		
		public System.Data.Linq.Table<MstCity> MstCities
		{
			get
			{
				return this.GetTable<MstCity>();
			}
		}
		
		public System.Data.Linq.Table<MstCountry> MstCountries
		{
			get
			{
				return this.GetTable<MstCountry>();
			}
		}
		
		public System.Data.Linq.Table<MstPatient> MstPatients
		{
			get
			{
				return this.GetTable<MstPatient>();
			}
		}
		
		public System.Data.Linq.Table<MstProvince> MstProvinces
		{
			get
			{
				return this.GetTable<MstProvince>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstBarangay")]
	public partial class MstBarangay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Barangay;
		
		private int _CityId;
		
		private EntitySet<MstPatient> _MstPatients;
		
		private EntityRef<MstCity> _MstCity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBarangayChanging(string value);
    partial void OnBarangayChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    #endregion
		
		public MstBarangay()
		{
			this._MstPatients = new EntitySet<MstPatient>(new Action<MstPatient>(this.attach_MstPatients), new Action<MstPatient>(this.detach_MstPatients));
			this._MstCity = default(EntityRef<MstCity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Barangay", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Barangay
		{
			get
			{
				return this._Barangay;
			}
			set
			{
				if ((this._Barangay != value))
				{
					this.OnBarangayChanging(value);
					this.SendPropertyChanging();
					this._Barangay = value;
					this.SendPropertyChanged("Barangay");
					this.OnBarangayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._MstCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstPatient", Storage="_MstPatients", ThisKey="Id", OtherKey="BarangayId")]
		public EntitySet<MstPatient> MstPatients
		{
			get
			{
				return this._MstPatients;
			}
			set
			{
				this._MstPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstBarangay", Storage="_MstCity", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public MstCity MstCity
		{
			get
			{
				return this._MstCity.Entity;
			}
			set
			{
				MstCity previousValue = this._MstCity.Entity;
				if (((previousValue != value) 
							|| (this._MstCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCity.Entity = null;
						previousValue.MstBarangays.Remove(this);
					}
					this._MstCity.Entity = value;
					if ((value != null))
					{
						value.MstBarangays.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("MstCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay = this;
		}
		
		private void detach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstBarangay = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstTable")]
	public partial class MstTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category;
		
		private string _Code;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public MstTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCity")]
	public partial class MstCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _City;
		
		private int _ProvinceId;
		
		private int _CityType;
		
		private EntitySet<MstBarangay> _MstBarangays;
		
		private EntitySet<MstPatient> _MstPatients;
		
		private EntityRef<MstProvince> _MstProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnCityTypeChanging(int value);
    partial void OnCityTypeChanged();
    #endregion
		
		public MstCity()
		{
			this._MstBarangays = new EntitySet<MstBarangay>(new Action<MstBarangay>(this.attach_MstBarangays), new Action<MstBarangay>(this.detach_MstBarangays));
			this._MstPatients = new EntitySet<MstPatient>(new Action<MstPatient>(this.attach_MstPatients), new Action<MstPatient>(this.detach_MstPatients));
			this._MstProvince = default(EntityRef<MstProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._MstProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityType", DbType="Int NOT NULL")]
		public int CityType
		{
			get
			{
				return this._CityType;
			}
			set
			{
				if ((this._CityType != value))
				{
					this.OnCityTypeChanging(value);
					this.SendPropertyChanging();
					this._CityType = value;
					this.SendPropertyChanged("CityType");
					this.OnCityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstBarangay", Storage="_MstBarangays", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<MstBarangay> MstBarangays
		{
			get
			{
				return this._MstBarangays;
			}
			set
			{
				this._MstBarangays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstPatient", Storage="_MstPatients", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<MstPatient> MstPatients
		{
			get
			{
				return this._MstPatients;
			}
			set
			{
				this._MstPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCity", Storage="_MstProvince", ThisKey="ProvinceId", OtherKey="Id", IsForeignKey=true)]
		public MstProvince MstProvince
		{
			get
			{
				return this._MstProvince.Entity;
			}
			set
			{
				MstProvince previousValue = this._MstProvince.Entity;
				if (((previousValue != value) 
							|| (this._MstProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstProvince.Entity = null;
						previousValue.MstCities.Remove(this);
					}
					this._MstProvince.Entity = value;
					if ((value != null))
					{
						value.MstCities.Add(this);
						this._ProvinceId = value.Id;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("MstProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstBarangays(MstBarangay entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = this;
		}
		
		private void detach_MstBarangays(MstBarangay entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = null;
		}
		
		private void attach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = this;
		}
		
		private void detach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstCity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstCountry")]
	public partial class MstCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Country;
		
		private EntitySet<MstPatient> _MstPatients;
		
		private EntitySet<MstProvince> _MstProvinces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public MstCountry()
		{
			this._MstPatients = new EntitySet<MstPatient>(new Action<MstPatient>(this.attach_MstPatients), new Action<MstPatient>(this.detach_MstPatients));
			this._MstProvinces = new EntitySet<MstProvince>(new Action<MstProvince>(this.attach_MstProvinces), new Action<MstProvince>(this.detach_MstProvinces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstPatient", Storage="_MstPatients", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<MstPatient> MstPatients
		{
			get
			{
				return this._MstPatients;
			}
			set
			{
				this._MstPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstProvince", Storage="_MstProvinces", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<MstProvince> MstProvinces
		{
			get
			{
				return this._MstProvinces;
			}
			set
			{
				this._MstProvinces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = this;
		}
		
		private void detach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = null;
		}
		
		private void attach_MstProvinces(MstProvince entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = this;
		}
		
		private void detach_MstProvinces(MstProvince entity)
		{
			this.SendPropertyChanging();
			entity.MstCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstPatient")]
	public partial class MstPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PatientCode;
		
		private string _Patient;
		
		private System.DateTime _DateEncoded;
		
		private System.DateTime _DateOfArrival;
		
		private System.DateTime _DateOfQuarantine;
		
		private int _Age;
		
		private string _Sex;
		
		private string _Address;
		
		private string _ContactNumber;
		
		private int _BarangayId;
		
		private int _CityId;
		
		private int _ProvinceId;
		
		private int _CountryId;
		
		private string _Cluster;
		
		private string _PassportNumber;
		
		private string _Remarks;
		
		private EntityRef<MstBarangay> _MstBarangay;
		
		private EntityRef<MstCity> _MstCity;
		
		private EntityRef<MstCountry> _MstCountry;
		
		private EntityRef<MstProvince> _MstProvince;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPatientCodeChanging(string value);
    partial void OnPatientCodeChanged();
    partial void OnPatientChanging(string value);
    partial void OnPatientChanged();
    partial void OnDateEncodedChanging(System.DateTime value);
    partial void OnDateEncodedChanged();
    partial void OnDateOfArrivalChanging(System.DateTime value);
    partial void OnDateOfArrivalChanged();
    partial void OnDateOfQuarantineChanging(System.DateTime value);
    partial void OnDateOfQuarantineChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnBarangayIdChanging(int value);
    partial void OnBarangayIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnClusterChanging(string value);
    partial void OnClusterChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public MstPatient()
		{
			this._MstBarangay = default(EntityRef<MstBarangay>);
			this._MstCity = default(EntityRef<MstCity>);
			this._MstCountry = default(EntityRef<MstCountry>);
			this._MstProvince = default(EntityRef<MstProvince>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientCode
		{
			get
			{
				return this._PatientCode;
			}
			set
			{
				if ((this._PatientCode != value))
				{
					this.OnPatientCodeChanging(value);
					this.SendPropertyChanging();
					this._PatientCode = value;
					this.SendPropertyChanged("PatientCode");
					this.OnPatientCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Patient
		{
			get
			{
				return this._Patient;
			}
			set
			{
				if ((this._Patient != value))
				{
					this.OnPatientChanging(value);
					this.SendPropertyChanging();
					this._Patient = value;
					this.SendPropertyChanged("Patient");
					this.OnPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEncoded", DbType="DateTime NOT NULL")]
		public System.DateTime DateEncoded
		{
			get
			{
				return this._DateEncoded;
			}
			set
			{
				if ((this._DateEncoded != value))
				{
					this.OnDateEncodedChanging(value);
					this.SendPropertyChanging();
					this._DateEncoded = value;
					this.SendPropertyChanged("DateEncoded");
					this.OnDateEncodedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfArrival", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfArrival
		{
			get
			{
				return this._DateOfArrival;
			}
			set
			{
				if ((this._DateOfArrival != value))
				{
					this.OnDateOfArrivalChanging(value);
					this.SendPropertyChanging();
					this._DateOfArrival = value;
					this.SendPropertyChanged("DateOfArrival");
					this.OnDateOfArrivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfQuarantine", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfQuarantine
		{
			get
			{
				return this._DateOfQuarantine;
			}
			set
			{
				if ((this._DateOfQuarantine != value))
				{
					this.OnDateOfQuarantineChanging(value);
					this.SendPropertyChanging();
					this._DateOfQuarantine = value;
					this.SendPropertyChanged("DateOfQuarantine");
					this.OnDateOfQuarantineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarangayId", DbType="Int NOT NULL")]
		public int BarangayId
		{
			get
			{
				return this._BarangayId;
			}
			set
			{
				if ((this._BarangayId != value))
				{
					if (this._MstBarangay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarangayIdChanging(value);
					this.SendPropertyChanging();
					this._BarangayId = value;
					this.SendPropertyChanged("BarangayId");
					this.OnBarangayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._MstCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._MstProvince.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._MstCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cluster", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cluster
		{
			get
			{
				return this._Cluster;
			}
			set
			{
				if ((this._Cluster != value))
				{
					this.OnClusterChanging(value);
					this.SendPropertyChanging();
					this._Cluster = value;
					this.SendPropertyChanged("Cluster");
					this.OnClusterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstBarangay_MstPatient", Storage="_MstBarangay", ThisKey="BarangayId", OtherKey="Id", IsForeignKey=true)]
		public MstBarangay MstBarangay
		{
			get
			{
				return this._MstBarangay.Entity;
			}
			set
			{
				MstBarangay previousValue = this._MstBarangay.Entity;
				if (((previousValue != value) 
							|| (this._MstBarangay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstBarangay.Entity = null;
						previousValue.MstPatients.Remove(this);
					}
					this._MstBarangay.Entity = value;
					if ((value != null))
					{
						value.MstPatients.Add(this);
						this._BarangayId = value.Id;
					}
					else
					{
						this._BarangayId = default(int);
					}
					this.SendPropertyChanged("MstBarangay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCity_MstPatient", Storage="_MstCity", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public MstCity MstCity
		{
			get
			{
				return this._MstCity.Entity;
			}
			set
			{
				MstCity previousValue = this._MstCity.Entity;
				if (((previousValue != value) 
							|| (this._MstCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCity.Entity = null;
						previousValue.MstPatients.Remove(this);
					}
					this._MstCity.Entity = value;
					if ((value != null))
					{
						value.MstPatients.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("MstCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstPatient", Storage="_MstCountry", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public MstCountry MstCountry
		{
			get
			{
				return this._MstCountry.Entity;
			}
			set
			{
				MstCountry previousValue = this._MstCountry.Entity;
				if (((previousValue != value) 
							|| (this._MstCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCountry.Entity = null;
						previousValue.MstPatients.Remove(this);
					}
					this._MstCountry.Entity = value;
					if ((value != null))
					{
						value.MstPatients.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("MstCountry");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstPatient", Storage="_MstProvince", ThisKey="ProvinceId", OtherKey="Id", IsForeignKey=true)]
		public MstProvince MstProvince
		{
			get
			{
				return this._MstProvince.Entity;
			}
			set
			{
				MstProvince previousValue = this._MstProvince.Entity;
				if (((previousValue != value) 
							|| (this._MstProvince.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstProvince.Entity = null;
						previousValue.MstPatients.Remove(this);
					}
					this._MstProvince.Entity = value;
					if ((value != null))
					{
						value.MstPatients.Add(this);
						this._ProvinceId = value.Id;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("MstProvince");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MstProvince")]
	public partial class MstProvince : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Province;
		
		private int _CountryId;
		
		private EntitySet<MstCity> _MstCities;
		
		private EntitySet<MstPatient> _MstPatients;
		
		private EntityRef<MstCountry> _MstCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    #endregion
		
		public MstProvince()
		{
			this._MstCities = new EntitySet<MstCity>(new Action<MstCity>(this.attach_MstCities), new Action<MstCity>(this.detach_MstCities));
			this._MstPatients = new EntitySet<MstPatient>(new Action<MstPatient>(this.attach_MstPatients), new Action<MstPatient>(this.detach_MstPatients));
			this._MstCountry = default(EntityRef<MstCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._MstCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstCity", Storage="_MstCities", ThisKey="Id", OtherKey="ProvinceId")]
		public EntitySet<MstCity> MstCities
		{
			get
			{
				return this._MstCities;
			}
			set
			{
				this._MstCities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstProvince_MstPatient", Storage="_MstPatients", ThisKey="Id", OtherKey="ProvinceId")]
		public EntitySet<MstPatient> MstPatients
		{
			get
			{
				return this._MstPatients;
			}
			set
			{
				this._MstPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MstCountry_MstProvince", Storage="_MstCountry", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public MstCountry MstCountry
		{
			get
			{
				return this._MstCountry.Entity;
			}
			set
			{
				MstCountry previousValue = this._MstCountry.Entity;
				if (((previousValue != value) 
							|| (this._MstCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MstCountry.Entity = null;
						previousValue.MstProvinces.Remove(this);
					}
					this._MstCountry.Entity = value;
					if ((value != null))
					{
						value.MstProvinces.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("MstCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MstCities(MstCity entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = this;
		}
		
		private void detach_MstCities(MstCity entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = null;
		}
		
		private void attach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = this;
		}
		
		private void detach_MstPatients(MstPatient entity)
		{
			this.SendPropertyChanging();
			entity.MstProvince = null;
		}
	}
}
#pragma warning restore 1591
